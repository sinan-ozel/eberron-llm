{
    // See https://go.microsoft.com/fwlink/?LinkId=733558
    // for the documentation about the tasks.json format
    "version": "2.0.0",
    "tasks": [
      {
        "label": "build-ollama-single-model-server",
        "type": "shell",
        "command": [
          "docker build --no-cache --build-arg MODEL_NAME=${input:MODEL_NAME} --build-arg MODEL_TAG=${input:MODEL_TAG} --tag ollama-server:${input:MODEL_NAME}-${input:MODEL_TAG} --file ./ollama/Dockerfile ./ollama;",
          "docker create --entrypoint \\\"\\\" \\\"ollama-server:${input:MODEL_NAME}-${input:MODEL_TAG}\\\" bash -c 'ls -al /root/.ollama/models/manifests/registry.ollama.ai/library/${input:MODEL_NAME}/${input:MODEL_TAG} && ls -al /root/.ollama/models/blobs/sha256-*'"
        ],
        "group": "build",
        "presentation": {
          "reveal": "always",
          "panel": "new"
        }
      },
      {
        "label": "push-ollama-single-model-server-to-aws",
        "dependsOn": "build-ollama-single-model-server",
        "type": "shell",
        "command": [
          "AWS_ACCOUNT_ID=$(aws sts get-caller-identity --query 'Account' --output text);",
          "aws ecr get-login-password --region ${config:aws.region} | docker login --username AWS --password-stdin ${AWS_ACCOUNT_ID}.dkr.ecr.${config:aws.region}.amazonaws.com;",
          "aws ecr describe-repositories --repository-names model-servers/ollama-server-${input:MODEL_NAME} --region ${config:aws.region} || aws ecr create-repository --repository-name model-servers/ollama-server-${input:MODEL_NAME} --region ${config:aws.region};",
          "docker tag model-servers/ollama-server-${input:MODEL_NAME}:${input:MODEL_TAG} ${AWS_ACCOUNT_ID}.dkr.ecr.${config:aws.region}.amazonaws.com/model-servers/ollama-server-${input:MODEL_NAME}:${input:MODEL_TAG};",
          "docker push ${AWS_ACCOUNT_ID}.dkr.ecr.${config:aws.region}.amazonaws.com/model-servers/ollama-server-${input:MODEL_NAME}:${input:MODEL_TAG};"
        ],
        "windows": {
          "command": [
            "$AWS_ACCOUNT_ID=$(aws sts get-caller-identity --query Account --output text);",
            "$HOSTNAME = \\\"${AWS_ACCOUNT_ID}.dkr.ecr.${config:aws.region}.amazonaws.com\\\";",
            "aws ecr get-login-password --region ${config:aws.region} | docker login --username AWS --password-stdin $HOSTNAME;",
            "aws ecr create-repository --repository-name model-servers/ollama-server-${input:MODEL_NAME} --region ${config:aws.region};",
            "docker tag model-servers/ollama-server-${input:MODEL_NAME}:${input:MODEL_TAG} $HOSTNAME/model-servers/ollama-server-${input:MODEL_NAME}:${input:MODEL_TAG};",
            "docker push $HOSTNAME/model-servers/ollama-server-${input:MODEL_NAME}:${input:MODEL_TAG};"
          ]
        },
        "group": "build",
        "presentation": {
          "reveal": "always",
          "panel": "new"
        }
      },
      {
        "label": "test-ollama-single-model-server-on-aws",
        "dependsOn": "push-ollama-single-model-server-to-aws",
        "type": "shell",
        "command": [
          "$AWS_ACCOUNT_ID=$(aws sts get-caller-identity --query 'Account' --output text);",
          "aws ecr get-login-password --region ${config:aws.region} | docker login --username AWS --password-stdin ${AWS_ACCOUNT_ID}.dkr.ecr.${config:aws.region}.amazonaws.com;",
          "$REGION=${config:aws.region};",
          "cd ollama/test && docker-compose up --build;",
        ],
        "windows": {
          "command": [
            "$AWS_ACCOUNT_ID=$(aws sts get-caller-identity --query Account --output text);",
            "$HOSTNAME=\\\"${AWS_ACCOUNT_ID}.dkr.ecr.${config:aws.region}.amazonaws.com\\\";",
            "aws ecr get-login-password --region ${config:aws.region} | docker login --username AWS --password-stdin ${HOSTNAME};",
            "$env:REGION=\\\"${config:aws.region}\\\";",
            "$env:AWS_ACCOUNT_ID=\\\"${AWS_ACCOUNT_ID}\\\";",
            "cd ollama/test;",
            "docker-compose up --build;",
          ]
        },
        "options": {
          "env": {
            "MODEL_NAME": "${input:MODEL_NAME}",
            "MODEL_TAG": "${input:MODEL_TAG}"
          }
        },
        "group": "none",
        "presentation": {
          "reveal": "always",
          "panel": "new"
        }
      },
      {
        "label": "build-eberron-agent-frontend",
        "type": "shell",
        "command": [
          "docker build --tag multi-agent/eberron-agent-frontend:${config:eberron-agent-frontend.version} --file ./multi-agent-servers/eberron-agent-frontend/Dockerfile ./multi-agent-servers/eberron-agent-frontend;",
        ],
        "group": "test",
        "presentation": {
          "reveal": "always",
          "panel": "new"
        },
      },
      {
        "label": "test-eberron-agent-frontend",
        "type": "shell",
        "command": [
          "cd ./multi-agent-servers/eberron-agent-frontend; docker-compose up --build --abort-on-container-exit --exit-code-from test",
        ],
        "windows": {
          "command": [
            "cd .\\multi-agent-servers\\eberron-agent-frontend; docker-compose up --build --abort-on-container-exit --exit-code-from test",
          ]
        },
        "group": "test",
        "presentation": {
          "reveal": "always",
          "panel": "new"
        },
      },
      {
        "label": "push-eberron-agent-frontend-to-aws",
        "dependsOn": "build",
        "type": "shell",
        "command": [
          "AWS_ACCOUNT_ID=$(aws sts get-caller-identity --query 'Account' --output text);",
          "aws ecr get-login-password --region ${config:aws.region} | docker login --username AWS --password-stdin ${AWS_ACCOUNT_ID}.dkr.ecr.${config:aws.region}.amazonaws.com",
        ],
        "windows": {
          "command": [
            "$AWS_ACCOUNT_ID = $(aws sts get-caller-identity --query Account --output text); ",
            "$HOSTNAME = \\\"${AWS_ACCOUNT_ID}.dkr.ecr.${config:aws.region}.amazonaws.com\\\";",
            "aws ecr get-login-password --region ${config:aws.region} | docker login --username AWS --password-stdin $HOSTNAME;",
            "docker tag multi-agent/eberron-agent-frontend:${config:eberron-agent-server.version} $HOSTNAME/multi-agent/eberron-agent-frontend:${config:eberron-agent-frontend.version};",
            "docker push $HOSTNAME/multi-agent/eberron-agent-frontend:${config:eberron-agent-frontend.version};",
          ]
        },
        "group": "test",
        "presentation": {
          "reveal": "always",
          "panel": "new"
        }
      },
      {
        "label": "build-eberron-agent-server",
        "type": "shell",
        "command": [
          "docker build --tag multi-agent/eberron-agent-server:${config:eberron-agent-server.version} --file ./multi-agent-servers/eberron-agent-server/Dockerfile ./multi-agent-servers/eberron-agent-server;",
        ],
        "group": "test",
        "presentation": {
          "reveal": "always",
          "panel": "new"
        },
      },
      {
        "label": "test-eberron-agent-server",
        "type": "shell",
        "command": [
          "cd ./multi-agent-servers/eberron-agent-server; docker-compose up --build --abort-on-container-exit --exit-code-from test",
        ],
        "windows": {
          "command": [
            "cd .\\multi-agent-servers\\eberron-agent-server; docker-compose up --build --abort-on-container-exit --exit-code-from test",
          ]
        },
        "group": "test",
        "presentation": {
          "reveal": "always",
          "panel": "new"
        },
      },
      {
        "label": "push-eberron-agent-server-to-aws",
        "dependsOn": "build",
        "type": "shell",
        "command": [
          "AWS_ACCOUNT_ID=$(aws sts get-caller-identity --query 'Account' --output text);",
          "aws ecr get-login-password --region ${config:aws.region} | docker login --username AWS --password-stdin ${AWS_ACCOUNT_ID}.dkr.ecr.${config:aws.region}.amazonaws.com",
        ],
        "windows": {
          "command": [
            "$AWS_ACCOUNT_ID=$(aws sts get-caller-identity --query Account --output text); ",
            "$HOSTNAME=\\\"${AWS_ACCOUNT_ID}.dkr.ecr.${config:aws.region}.amazonaws.com\\\";",
            "aws ecr get-login-password --region ${config:aws.region} | docker login --username AWS --password-stdin $HOSTNAME;",
            "docker tag multi-agent/eberron-agent-server:${config:eberron-agent-server.version} $HOSTNAME/multi-agent/eberron-agent-server:${config:eberron-agent-server.version};",
            "docker push $HOSTNAME/multi-agent/eberron-agent-server:${config:eberron-agent-server.version};",
          ]
        },
        "group": "test",
        "presentation": {
          "reveal": "always",
          "panel": "new"
        }
      },
      {
        "label": "run-kubyterlab-locally",
        "dependsOn": "build",
        "type": "shell",
        "command": [
          "$AWS_ACCOUNT_ID=$(aws sts get-caller-identity --query 'Account' --output text);",
          "aws ecr get-login-password --region ${config:aws.region} | docker login --username AWS --password-stdin ${AWS_ACCOUNT_ID}.dkr.ecr.${config:aws.region}.amazonaws.com;",
          "$REGION=${config:aws.region};",
          "docker-compose up --build;",
        ],
        "windows": {
          "command": [
            "$AWS_ACCOUNT_ID=$(aws sts get-caller-identity --query Account --output text);",
            "$HOSTNAME=\\\"${AWS_ACCOUNT_ID}.dkr.ecr.${config:aws.region}.amazonaws.com\\\";",
            "aws ecr get-login-password --region ${config:aws.region} | docker login --username AWS --password-stdin ${HOSTNAME};",
            "$env:REGION=\\\"${config:aws.region}\\\";",
            "$env:AWS_ACCOUNT_ID=\\\"${AWS_ACCOUNT_ID}\\\";",
            "docker-compose up --build;",
          ]
        },
        "group": "none",
        "presentation": {
          "reveal": "always",
          "panel": "new"
        }
      },
      {
        "label": "get-jupyterlab-key",
        "type": "shell",
        "command": "docker exec -it kubyterlab bash -c 'jupyter server list | grep token | sed -n \\\"s/.*token=//p\\\" | sed -n \\\"s/::.*//p\\\"'",
        "group": {
            "kind": "build",
            "isDefault": true
        },
        "presentation": {
            "echo": true,
            "reveal": "always",
            "focus": false,
            "panel": "shared"
        },
        "problemMatcher": []
    },
    {
      "label": "freeze",
      "type": "shell",
      "command": [
        "docker exec -it kubyterlab bash -c 'mkdir -p /tmp; pip freeze > /tmp/freeze.txt';",
        "docker cp kubyterlab:/tmp/freeze.txt ./jupyterlab/freeze/${config:kubyterlab.version}.txt"
      ],
      "group": {
          "kind": "build",
          "isDefault": true
      },
      "presentation": {
          "echo": true,
          "reveal": "always",
          "focus": false,
          "panel": "shared"
      },
      "problemMatcher": []
    }
  ],
  "inputs": [
    {
      "id": "MODEL_NAME",
      "type": "promptString",
      "description": "Enter the model name",
      "default": "gemma2"
    },
    {
      "id": "MODEL_TAG",
      "type": "promptString",
      "description": "Enter the model tag/version",
      "default": "2b"
    }
  ]
}